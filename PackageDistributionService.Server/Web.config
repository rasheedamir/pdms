<?xml version="1.0"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->
<configuration>

  <!-- Configuration Sections -->
  <configSections>
    <!-- Section 1: Spring -->
    <sectionGroup name="spring">
      <!--
      The ContextRegistry is used to both instantiate the application context and to perform service locator style access to other objects.
      The glue that makes this possible is an implementation of the Base Class Library (BCL) provided IConfigurationSectionHandler interface, 
      namely the Spring.Context.Support.ContextHandler class. The handler class needs to be registered in the configSections section of the 
      .NET configuration file as shown below. 
      This declaration now enables the use of a custom context section starting at the spring root element.
      -->
      <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core"/>
      <!--
      As of Spring.NET 1.2.0 it is no longer necessary to explicitly configure the namespace parsers that come with Spring via a custom section 
      in App.config. You will still need to register custom namespace parsers if you are writing your own.
      -->
      <!-- section name="parsers" type="Spring.Context.Support.NamespaceParsersSectionHandler, Spring.Core"/ -->
      <!--
      Your XML object definitions can also be defined within the standard .NET application configuration file by registering the 
      Spring.Context.Support.DefaultSectionHandler class as the configuration section handler for inline object definitions. This allows you 
      to completely configure one or more IApplicationContext instances within a single standard .NET application configuration file
      Not needed in this case!
      -->
      <!-- section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/ -->
    </sectionGroup>
    <!-- Section 2: Database Settings -->
    <section name="databaseSettings" type="System.Configuration.NameValueSectionHandler, System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
    <!-- Section 3: Commons Logging -->
    <sectionGroup name="common">
      <section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging"/>
    </sectionGroup>
    <!-- Section 4: log4net -->
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net"/>
  </configSections>
  
  <!-- Section 1: Spring Configurations -->
  <spring>
    <!-- parsers>
      <parser type="Spring.Data.Config.DatabaseNamespaceParser, Spring.Data"/ -->
      <!-- Spring provides a custom XML schema to simplify the configuration of declarative transaction management. 
           If you would like to perform attribute driven transaction management you first need to register the custom 
           namespace parser for the transaction namespace.-->
      <!-- parser type="Spring.Transaction.Config.TxNamespaceParser, Spring.Data"/>
    </parsers -->
    <!--
    You can also create a container by using a custom configuration section in the standard .NET application configuration 
    file (one of App.config or Web.config). A custom configuration section that creates the same IApplicationContext as 
    the previous example is 
    -->
    <context>
      <resource uri="~/Config/context-resource.xml"/>
    </context>
  </spring>
  
  <!-- Section 2: Database Configurations -->
  <!-- These properties are referenced in Dao.xml -->
  <databaseSettings>
    <add key="db.datasource" value="localhost"/>
    <add key="db.user" value="root"/>
    <add key="db.password" value="root"/>
    <add key="db.database" value="pdms"/>
  </databaseSettings>
  
  <!-- Section 3: Commons Logging Configurations -->
  <common>
    <logging>
      <factoryAdapter type="Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net">
        <!-- choices are INLINE, FILE, FILE-WATCH, EXTERNAL-->
        <!-- otherwise BasicConfigurer.Configure is used   -->
        <!-- log4net configuration file is specified with key configFile-->
        <arg key="configType" value="INLINE"/>
        <arg key="configFile" value="filename"/>
      </factoryAdapter>
    </logging>
  </common>
  
  <!-- Section 4: Log4Net Configurations -->
  <log4net>
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%-5level %logger - %message%newline"/>
      </layout>
    </appender>
    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
      <file type="log4net.Util.PatternString" value="c:/PDS/logs/info_%date{yyyyMMdd}.log"/>
      <appendToFile value="true"/>
      <rollingStyle value="Date"/>
      <datePattern value="yyyyMMdd"/>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger :   %message%newline"/>
      </layout>
    </appender>
    <!-- Set default logging level to DEBUG -->
    <root>
      <level value="DEBUG"/>
      <appender-ref ref="ConsoleAppender"/>
      <appender-ref ref="RollingFileAppender"/>
    </root>
    <!-- Set logging for Spring.  Logger names in Spring correspond to the namespace -->
    <logger name="Spring">
      <level value="INFO"/>
    </logger>
    <logger name="Spring.Data">
      <level value="DEBUG"/>
    </logger>
    <logger name="NHibernate">
      <level value="INFO"/>
    </logger>
  </log4net>
  
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <!--You can find out the Version Number and PublicKeyToken of the MySql.Data Assembly by using the Visual Studio command line and typing :- gacutil /l MySql.Data-->
      <qualifyAssembly partialName="MySql.Data" fullName="MySql.Data, Version=6.6.5.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d"/>
    </assemblyBinding>
  </runtime>
  
  <system.web>
    <httpModules>
      <!-- http://stackoverflow.com/questions/2311536/spring-net-with-nhibernate-and-the-no-hibernate-session-bound-to-thread-error -->
      <!-- http://stackoverflow.com/questions/12566610/no-hibernate-session-bound-to-thread-exception-using-asp-mvc-3-nhibernate-3-2-a -->
      <!-- http://www.springframework.net/doc-latest/reference/html/orm.html#orm-hibernate-web -->
      <!-- add name="Spring" type="Spring.Context.Support.WebSupportModule, Spring.Web"/>
      <add name="OpenSessionInView" type="Spring.Data.NHibernate.Support.OpenSessionInViewModule, Spring.Data.NHibernate32"/ -->
    </httpModules>
    <compilation debug="true" targetFramework="4.0"/>
  </system.web>

  <appSettings>
    <!-- http://stackoverflow.com/questions/2311536/spring-net-with-nhibernate-and-the-no-hibernate-session-bound-to-thread-error -->
    <!-- add key="Spring.Data.NHibernate.Support.OpenSessionInViewModule.SessionFactoryObjectName" value="NHibernateSessionFactory"/ -->
  </appSettings>
  
  <system.webServer>
    <validation validateIntegratedModeConfiguration="false"/>
  </system.webServer>
  
  <system.serviceModel>
    <services>
      <service name="DistributionService" behaviorConfiguration="defaultBehavior">
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost/DistributionService"/>
          </baseAddresses>
        </host>
        <endpoint address="" binding="basicHttpBinding" contract="PackageDistributionService.Service.Services.IDistributionService"/>
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior name="defaultBehavior">
          <serviceMetadata httpGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <serviceHostingEnvironment multipleSiteBindingsEnabled="true"/>
  </system.serviceModel>
</configuration>